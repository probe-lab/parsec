// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Retrieval is an object representing the database table.
type Retrieval struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	SchedulerID int         `boil:"scheduler_id" json:"scheduler_id" toml:"scheduler_id" yaml:"scheduler_id"`
	NodeID      int         `boil:"node_id" json:"node_id" toml:"node_id" yaml:"node_id"`
	RTSize      int         `boil:"rt_size" json:"rt_size" toml:"rt_size" yaml:"rt_size"`
	Duration    float64     `boil:"duration" json:"duration" toml:"duration" yaml:"duration"`
	Cid         string      `boil:"cid" json:"cid" toml:"cid" yaml:"cid"`
	Error       null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *retrievalR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L retrievalL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RetrievalColumns = struct {
	ID          string
	SchedulerID string
	NodeID      string
	RTSize      string
	Duration    string
	Cid         string
	Error       string
	CreatedAt   string
}{
	ID:          "id",
	SchedulerID: "scheduler_id",
	NodeID:      "node_id",
	RTSize:      "rt_size",
	Duration:    "duration",
	Cid:         "cid",
	Error:       "error",
	CreatedAt:   "created_at",
}

var RetrievalTableColumns = struct {
	ID          string
	SchedulerID string
	NodeID      string
	RTSize      string
	Duration    string
	Cid         string
	Error       string
	CreatedAt   string
}{
	ID:          "retrievals_ecs.id",
	SchedulerID: "retrievals_ecs.scheduler_id",
	NodeID:      "retrievals_ecs.node_id",
	RTSize:      "retrievals_ecs.rt_size",
	Duration:    "retrievals_ecs.duration",
	Cid:         "retrievals_ecs.cid",
	Error:       "retrievals_ecs.error",
	CreatedAt:   "retrievals_ecs.created_at",
}

// Generated where

var RetrievalWhere = struct {
	ID          whereHelperint
	SchedulerID whereHelperint
	NodeID      whereHelperint
	RTSize      whereHelperint
	Duration    whereHelperfloat64
	Cid         whereHelperstring
	Error       whereHelpernull_String
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint{field: "\"retrievals_ecs\".\"id\""},
	SchedulerID: whereHelperint{field: "\"retrievals_ecs\".\"scheduler_id\""},
	NodeID:      whereHelperint{field: "\"retrievals_ecs\".\"node_id\""},
	RTSize:      whereHelperint{field: "\"retrievals_ecs\".\"rt_size\""},
	Duration:    whereHelperfloat64{field: "\"retrievals_ecs\".\"duration\""},
	Cid:         whereHelperstring{field: "\"retrievals_ecs\".\"cid\""},
	Error:       whereHelpernull_String{field: "\"retrievals_ecs\".\"error\""},
	CreatedAt:   whereHelpertime_Time{field: "\"retrievals_ecs\".\"created_at\""},
}

// RetrievalRels is where relationship names are stored.
var RetrievalRels = struct {
	Node      string
	Scheduler string
}{
	Node:      "Node",
	Scheduler: "Scheduler",
}

// retrievalR is where relationships are stored.
type retrievalR struct {
	Node      *Node      `boil:"Node" json:"Node" toml:"Node" yaml:"Node"`
	Scheduler *Scheduler `boil:"Scheduler" json:"Scheduler" toml:"Scheduler" yaml:"Scheduler"`
}

// NewStruct creates a new relationship struct
func (*retrievalR) NewStruct() *retrievalR {
	return &retrievalR{}
}

func (o *Retrieval) GetNode() *Node {
	if o == nil {
		return nil
	}

	return o.R.GetNode()
}

func (r *retrievalR) GetNode() *Node {
	if r == nil {
		return nil
	}

	return r.Node
}

func (o *Retrieval) GetScheduler() *Scheduler {
	if o == nil {
		return nil
	}

	return o.R.GetScheduler()
}

func (r *retrievalR) GetScheduler() *Scheduler {
	if r == nil {
		return nil
	}

	return r.Scheduler
}

// retrievalL is where Load methods for each relationship are stored.
type retrievalL struct{}

var (
	retrievalAllColumns            = []string{"id", "scheduler_id", "node_id", "rt_size", "duration", "cid", "error", "created_at"}
	retrievalColumnsWithoutDefault = []string{"scheduler_id", "node_id", "rt_size", "duration", "cid", "created_at"}
	retrievalColumnsWithDefault    = []string{"id", "error"}
	retrievalPrimaryKeyColumns     = []string{"id"}
	retrievalGeneratedColumns      = []string{"id"}
)

type (
	// RetrievalSlice is an alias for a slice of pointers to Retrieval.
	// This should almost always be used instead of []Retrieval.
	RetrievalSlice []*Retrieval
	// RetrievalHook is the signature for custom Retrieval hook methods
	RetrievalHook func(context.Context, boil.ContextExecutor, *Retrieval) error

	retrievalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	retrievalType                 = reflect.TypeOf(&Retrieval{})
	retrievalMapping              = queries.MakeStructMapping(retrievalType)
	retrievalPrimaryKeyMapping, _ = queries.BindMapping(retrievalType, retrievalMapping, retrievalPrimaryKeyColumns)
	retrievalInsertCacheMut       sync.RWMutex
	retrievalInsertCache          = make(map[string]insertCache)
	retrievalUpdateCacheMut       sync.RWMutex
	retrievalUpdateCache          = make(map[string]updateCache)
	retrievalUpsertCacheMut       sync.RWMutex
	retrievalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var retrievalAfterSelectMu sync.Mutex
var retrievalAfterSelectHooks []RetrievalHook

var retrievalBeforeInsertMu sync.Mutex
var retrievalBeforeInsertHooks []RetrievalHook
var retrievalAfterInsertMu sync.Mutex
var retrievalAfterInsertHooks []RetrievalHook

var retrievalBeforeUpdateMu sync.Mutex
var retrievalBeforeUpdateHooks []RetrievalHook
var retrievalAfterUpdateMu sync.Mutex
var retrievalAfterUpdateHooks []RetrievalHook

var retrievalBeforeDeleteMu sync.Mutex
var retrievalBeforeDeleteHooks []RetrievalHook
var retrievalAfterDeleteMu sync.Mutex
var retrievalAfterDeleteHooks []RetrievalHook

var retrievalBeforeUpsertMu sync.Mutex
var retrievalBeforeUpsertHooks []RetrievalHook
var retrievalAfterUpsertMu sync.Mutex
var retrievalAfterUpsertHooks []RetrievalHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Retrieval) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Retrieval) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Retrieval) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Retrieval) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Retrieval) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Retrieval) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Retrieval) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Retrieval) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Retrieval) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRetrievalHook registers your hook function for all future operations.
func AddRetrievalHook(hookPoint boil.HookPoint, retrievalHook RetrievalHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		retrievalAfterSelectMu.Lock()
		retrievalAfterSelectHooks = append(retrievalAfterSelectHooks, retrievalHook)
		retrievalAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		retrievalBeforeInsertMu.Lock()
		retrievalBeforeInsertHooks = append(retrievalBeforeInsertHooks, retrievalHook)
		retrievalBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		retrievalAfterInsertMu.Lock()
		retrievalAfterInsertHooks = append(retrievalAfterInsertHooks, retrievalHook)
		retrievalAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		retrievalBeforeUpdateMu.Lock()
		retrievalBeforeUpdateHooks = append(retrievalBeforeUpdateHooks, retrievalHook)
		retrievalBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		retrievalAfterUpdateMu.Lock()
		retrievalAfterUpdateHooks = append(retrievalAfterUpdateHooks, retrievalHook)
		retrievalAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		retrievalBeforeDeleteMu.Lock()
		retrievalBeforeDeleteHooks = append(retrievalBeforeDeleteHooks, retrievalHook)
		retrievalBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		retrievalAfterDeleteMu.Lock()
		retrievalAfterDeleteHooks = append(retrievalAfterDeleteHooks, retrievalHook)
		retrievalAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		retrievalBeforeUpsertMu.Lock()
		retrievalBeforeUpsertHooks = append(retrievalBeforeUpsertHooks, retrievalHook)
		retrievalBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		retrievalAfterUpsertMu.Lock()
		retrievalAfterUpsertHooks = append(retrievalAfterUpsertHooks, retrievalHook)
		retrievalAfterUpsertMu.Unlock()
	}
}

// One returns a single retrieval record from the query.
func (q retrievalQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Retrieval, error) {
	o := &Retrieval{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for retrievals_ecs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Retrieval records from the query.
func (q retrievalQuery) All(ctx context.Context, exec boil.ContextExecutor) (RetrievalSlice, error) {
	var o []*Retrieval

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Retrieval slice")
	}

	if len(retrievalAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Retrieval records in the query.
func (q retrievalQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count retrievals_ecs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q retrievalQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if retrievals_ecs exists")
	}

	return count > 0, nil
}

// Node pointed to by the foreign key.
func (o *Retrieval) Node(mods ...qm.QueryMod) nodeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NodeID),
	}

	queryMods = append(queryMods, mods...)

	return Nodes(queryMods...)
}

// Scheduler pointed to by the foreign key.
func (o *Retrieval) Scheduler(mods ...qm.QueryMod) schedulerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SchedulerID),
	}

	queryMods = append(queryMods, mods...)

	return Schedulers(queryMods...)
}

// LoadNode allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (retrievalL) LoadNode(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRetrieval interface{}, mods queries.Applicator) error {
	var slice []*Retrieval
	var object *Retrieval

	if singular {
		var ok bool
		object, ok = maybeRetrieval.(*Retrieval)
		if !ok {
			object = new(Retrieval)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRetrieval)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRetrieval))
			}
		}
	} else {
		s, ok := maybeRetrieval.(*[]*Retrieval)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRetrieval)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRetrieval))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &retrievalR{}
		}
		args[object.NodeID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &retrievalR{}
			}

			args[obj.NodeID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`nodes_ecs`),
		qm.WhereIn(`nodes_ecs.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Node")
	}

	var resultSlice []*Node
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Node")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for nodes_ecs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for nodes_ecs")
	}

	if len(nodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Node = foreign
		if foreign.R == nil {
			foreign.R = &nodeR{}
		}
		foreign.R.NodeRetrievalsEcs = append(foreign.R.NodeRetrievalsEcs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.NodeID == foreign.ID {
				local.R.Node = foreign
				if foreign.R == nil {
					foreign.R = &nodeR{}
				}
				foreign.R.NodeRetrievalsEcs = append(foreign.R.NodeRetrievalsEcs, local)
				break
			}
		}
	}

	return nil
}

// LoadScheduler allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (retrievalL) LoadScheduler(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRetrieval interface{}, mods queries.Applicator) error {
	var slice []*Retrieval
	var object *Retrieval

	if singular {
		var ok bool
		object, ok = maybeRetrieval.(*Retrieval)
		if !ok {
			object = new(Retrieval)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRetrieval)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRetrieval))
			}
		}
	} else {
		s, ok := maybeRetrieval.(*[]*Retrieval)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRetrieval)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRetrieval))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &retrievalR{}
		}
		args[object.SchedulerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &retrievalR{}
			}

			args[obj.SchedulerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`schedulers_ecs`),
		qm.WhereIn(`schedulers_ecs.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Scheduler")
	}

	var resultSlice []*Scheduler
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Scheduler")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for schedulers_ecs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for schedulers_ecs")
	}

	if len(schedulerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Scheduler = foreign
		if foreign.R == nil {
			foreign.R = &schedulerR{}
		}
		foreign.R.SchedulerRetrievalsEcs = append(foreign.R.SchedulerRetrievalsEcs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SchedulerID == foreign.ID {
				local.R.Scheduler = foreign
				if foreign.R == nil {
					foreign.R = &schedulerR{}
				}
				foreign.R.SchedulerRetrievalsEcs = append(foreign.R.SchedulerRetrievalsEcs, local)
				break
			}
		}
	}

	return nil
}

// SetNode of the retrieval to the related item.
// Sets o.R.Node to related.
// Adds o to related.R.NodeRetrievalsEcs.
func (o *Retrieval) SetNode(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Node) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"retrievals_ecs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"node_id"}),
		strmangle.WhereClause("\"", "\"", 2, retrievalPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.NodeID = related.ID
	if o.R == nil {
		o.R = &retrievalR{
			Node: related,
		}
	} else {
		o.R.Node = related
	}

	if related.R == nil {
		related.R = &nodeR{
			NodeRetrievalsEcs: RetrievalSlice{o},
		}
	} else {
		related.R.NodeRetrievalsEcs = append(related.R.NodeRetrievalsEcs, o)
	}

	return nil
}

// SetScheduler of the retrieval to the related item.
// Sets o.R.Scheduler to related.
// Adds o to related.R.SchedulerRetrievalsEcs.
func (o *Retrieval) SetScheduler(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Scheduler) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"retrievals_ecs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"scheduler_id"}),
		strmangle.WhereClause("\"", "\"", 2, retrievalPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SchedulerID = related.ID
	if o.R == nil {
		o.R = &retrievalR{
			Scheduler: related,
		}
	} else {
		o.R.Scheduler = related
	}

	if related.R == nil {
		related.R = &schedulerR{
			SchedulerRetrievalsEcs: RetrievalSlice{o},
		}
	} else {
		related.R.SchedulerRetrievalsEcs = append(related.R.SchedulerRetrievalsEcs, o)
	}

	return nil
}

// Retrievals retrieves all the records using an executor.
func Retrievals(mods ...qm.QueryMod) retrievalQuery {
	mods = append(mods, qm.From("\"retrievals_ecs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"retrievals_ecs\".*"})
	}

	return retrievalQuery{q}
}

// FindRetrieval retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRetrieval(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Retrieval, error) {
	retrievalObj := &Retrieval{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"retrievals_ecs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, retrievalObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from retrievals_ecs")
	}

	if err = retrievalObj.doAfterSelectHooks(ctx, exec); err != nil {
		return retrievalObj, err
	}

	return retrievalObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Retrieval) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no retrievals_ecs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(retrievalColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	retrievalInsertCacheMut.RLock()
	cache, cached := retrievalInsertCache[key]
	retrievalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			retrievalAllColumns,
			retrievalColumnsWithDefault,
			retrievalColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, retrievalGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(retrievalType, retrievalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(retrievalType, retrievalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"retrievals_ecs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"retrievals_ecs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into retrievals_ecs")
	}

	if !cached {
		retrievalInsertCacheMut.Lock()
		retrievalInsertCache[key] = cache
		retrievalInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Retrieval.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Retrieval) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	retrievalUpdateCacheMut.RLock()
	cache, cached := retrievalUpdateCache[key]
	retrievalUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			retrievalAllColumns,
			retrievalPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, retrievalGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update retrievals_ecs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"retrievals_ecs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, retrievalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(retrievalType, retrievalMapping, append(wl, retrievalPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update retrievals_ecs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for retrievals_ecs")
	}

	if !cached {
		retrievalUpdateCacheMut.Lock()
		retrievalUpdateCache[key] = cache
		retrievalUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q retrievalQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for retrievals_ecs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for retrievals_ecs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RetrievalSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), retrievalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"retrievals_ecs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, retrievalPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in retrieval slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all retrieval")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Retrieval) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no retrievals_ecs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(retrievalColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	retrievalUpsertCacheMut.RLock()
	cache, cached := retrievalUpsertCache[key]
	retrievalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			retrievalAllColumns,
			retrievalColumnsWithDefault,
			retrievalColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			retrievalAllColumns,
			retrievalPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, retrievalGeneratedColumns)
		update = strmangle.SetComplement(update, retrievalGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert retrievals_ecs, could not build update column list")
		}

		ret := strmangle.SetComplement(retrievalAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(retrievalPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert retrievals_ecs, could not build conflict column list")
			}

			conflict = make([]string, len(retrievalPrimaryKeyColumns))
			copy(conflict, retrievalPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"retrievals_ecs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(retrievalType, retrievalMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(retrievalType, retrievalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert retrievals_ecs")
	}

	if !cached {
		retrievalUpsertCacheMut.Lock()
		retrievalUpsertCache[key] = cache
		retrievalUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Retrieval record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Retrieval) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Retrieval provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), retrievalPrimaryKeyMapping)
	sql := "DELETE FROM \"retrievals_ecs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from retrievals_ecs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for retrievals_ecs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q retrievalQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no retrievalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from retrievals_ecs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for retrievals_ecs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RetrievalSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(retrievalBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), retrievalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"retrievals_ecs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, retrievalPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from retrieval slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for retrievals_ecs")
	}

	if len(retrievalAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Retrieval) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRetrieval(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RetrievalSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RetrievalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), retrievalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"retrievals_ecs\".* FROM \"retrievals_ecs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, retrievalPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RetrievalSlice")
	}

	*o = slice

	return nil
}

// RetrievalExists checks if the Retrieval row exists.
func RetrievalExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"retrievals_ecs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if retrievals_ecs exists")
	}

	return exists, nil
}

// Exists checks if the Retrieval row exists.
func (o *Retrieval) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RetrievalExists(ctx, exec, o.ID)
}
