// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Scheduler is an object representing the database table.
type Scheduler struct {
	ID           int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	Fleets       types.StringArray `boil:"fleets" json:"fleets" toml:"fleets" yaml:"fleets"`
	Dependencies types.JSON        `boil:"dependencies" json:"dependencies" toml:"dependencies" yaml:"dependencies"`
	CreatedAt    time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *schedulerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L schedulerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SchedulerColumns = struct {
	ID           string
	Fleets       string
	Dependencies string
	CreatedAt    string
}{
	ID:           "id",
	Fleets:       "fleets",
	Dependencies: "dependencies",
	CreatedAt:    "created_at",
}

var SchedulerTableColumns = struct {
	ID           string
	Fleets       string
	Dependencies string
	CreatedAt    string
}{
	ID:           "schedulers_ecs.id",
	Fleets:       "schedulers_ecs.fleets",
	Dependencies: "schedulers_ecs.dependencies",
	CreatedAt:    "schedulers_ecs.created_at",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var SchedulerWhere = struct {
	ID           whereHelperint
	Fleets       whereHelpertypes_StringArray
	Dependencies whereHelpertypes_JSON
	CreatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint{field: "\"schedulers_ecs\".\"id\""},
	Fleets:       whereHelpertypes_StringArray{field: "\"schedulers_ecs\".\"fleets\""},
	Dependencies: whereHelpertypes_JSON{field: "\"schedulers_ecs\".\"dependencies\""},
	CreatedAt:    whereHelpertime_Time{field: "\"schedulers_ecs\".\"created_at\""},
}

// SchedulerRels is where relationship names are stored.
var SchedulerRels = struct {
	SchedulerProvidesEcs   string
	SchedulerRetrievalsEcs string
}{
	SchedulerProvidesEcs:   "SchedulerProvidesEcs",
	SchedulerRetrievalsEcs: "SchedulerRetrievalsEcs",
}

// schedulerR is where relationships are stored.
type schedulerR struct {
	SchedulerProvidesEcs   ProvideSlice   `boil:"SchedulerProvidesEcs" json:"SchedulerProvidesEcs" toml:"SchedulerProvidesEcs" yaml:"SchedulerProvidesEcs"`
	SchedulerRetrievalsEcs RetrievalSlice `boil:"SchedulerRetrievalsEcs" json:"SchedulerRetrievalsEcs" toml:"SchedulerRetrievalsEcs" yaml:"SchedulerRetrievalsEcs"`
}

// NewStruct creates a new relationship struct
func (*schedulerR) NewStruct() *schedulerR {
	return &schedulerR{}
}

func (o *Scheduler) GetSchedulerProvidesEcs() ProvideSlice {
	if o == nil {
		return nil
	}

	return o.R.GetSchedulerProvidesEcs()
}

func (r *schedulerR) GetSchedulerProvidesEcs() ProvideSlice {
	if r == nil {
		return nil
	}

	return r.SchedulerProvidesEcs
}

func (o *Scheduler) GetSchedulerRetrievalsEcs() RetrievalSlice {
	if o == nil {
		return nil
	}

	return o.R.GetSchedulerRetrievalsEcs()
}

func (r *schedulerR) GetSchedulerRetrievalsEcs() RetrievalSlice {
	if r == nil {
		return nil
	}

	return r.SchedulerRetrievalsEcs
}

// schedulerL is where Load methods for each relationship are stored.
type schedulerL struct{}

var (
	schedulerAllColumns            = []string{"id", "fleets", "dependencies", "created_at"}
	schedulerColumnsWithoutDefault = []string{"fleets", "dependencies", "created_at"}
	schedulerColumnsWithDefault    = []string{"id"}
	schedulerPrimaryKeyColumns     = []string{"id"}
	schedulerGeneratedColumns      = []string{"id"}
)

type (
	// SchedulerSlice is an alias for a slice of pointers to Scheduler.
	// This should almost always be used instead of []Scheduler.
	SchedulerSlice []*Scheduler
	// SchedulerHook is the signature for custom Scheduler hook methods
	SchedulerHook func(context.Context, boil.ContextExecutor, *Scheduler) error

	schedulerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	schedulerType                 = reflect.TypeOf(&Scheduler{})
	schedulerMapping              = queries.MakeStructMapping(schedulerType)
	schedulerPrimaryKeyMapping, _ = queries.BindMapping(schedulerType, schedulerMapping, schedulerPrimaryKeyColumns)
	schedulerInsertCacheMut       sync.RWMutex
	schedulerInsertCache          = make(map[string]insertCache)
	schedulerUpdateCacheMut       sync.RWMutex
	schedulerUpdateCache          = make(map[string]updateCache)
	schedulerUpsertCacheMut       sync.RWMutex
	schedulerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var schedulerAfterSelectMu sync.Mutex
var schedulerAfterSelectHooks []SchedulerHook

var schedulerBeforeInsertMu sync.Mutex
var schedulerBeforeInsertHooks []SchedulerHook
var schedulerAfterInsertMu sync.Mutex
var schedulerAfterInsertHooks []SchedulerHook

var schedulerBeforeUpdateMu sync.Mutex
var schedulerBeforeUpdateHooks []SchedulerHook
var schedulerAfterUpdateMu sync.Mutex
var schedulerAfterUpdateHooks []SchedulerHook

var schedulerBeforeDeleteMu sync.Mutex
var schedulerBeforeDeleteHooks []SchedulerHook
var schedulerAfterDeleteMu sync.Mutex
var schedulerAfterDeleteHooks []SchedulerHook

var schedulerBeforeUpsertMu sync.Mutex
var schedulerBeforeUpsertHooks []SchedulerHook
var schedulerAfterUpsertMu sync.Mutex
var schedulerAfterUpsertHooks []SchedulerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Scheduler) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Scheduler) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Scheduler) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Scheduler) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Scheduler) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Scheduler) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Scheduler) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Scheduler) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Scheduler) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSchedulerHook registers your hook function for all future operations.
func AddSchedulerHook(hookPoint boil.HookPoint, schedulerHook SchedulerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		schedulerAfterSelectMu.Lock()
		schedulerAfterSelectHooks = append(schedulerAfterSelectHooks, schedulerHook)
		schedulerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		schedulerBeforeInsertMu.Lock()
		schedulerBeforeInsertHooks = append(schedulerBeforeInsertHooks, schedulerHook)
		schedulerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		schedulerAfterInsertMu.Lock()
		schedulerAfterInsertHooks = append(schedulerAfterInsertHooks, schedulerHook)
		schedulerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		schedulerBeforeUpdateMu.Lock()
		schedulerBeforeUpdateHooks = append(schedulerBeforeUpdateHooks, schedulerHook)
		schedulerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		schedulerAfterUpdateMu.Lock()
		schedulerAfterUpdateHooks = append(schedulerAfterUpdateHooks, schedulerHook)
		schedulerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		schedulerBeforeDeleteMu.Lock()
		schedulerBeforeDeleteHooks = append(schedulerBeforeDeleteHooks, schedulerHook)
		schedulerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		schedulerAfterDeleteMu.Lock()
		schedulerAfterDeleteHooks = append(schedulerAfterDeleteHooks, schedulerHook)
		schedulerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		schedulerBeforeUpsertMu.Lock()
		schedulerBeforeUpsertHooks = append(schedulerBeforeUpsertHooks, schedulerHook)
		schedulerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		schedulerAfterUpsertMu.Lock()
		schedulerAfterUpsertHooks = append(schedulerAfterUpsertHooks, schedulerHook)
		schedulerAfterUpsertMu.Unlock()
	}
}

// One returns a single scheduler record from the query.
func (q schedulerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Scheduler, error) {
	o := &Scheduler{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for schedulers_ecs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Scheduler records from the query.
func (q schedulerQuery) All(ctx context.Context, exec boil.ContextExecutor) (SchedulerSlice, error) {
	var o []*Scheduler

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Scheduler slice")
	}

	if len(schedulerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Scheduler records in the query.
func (q schedulerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count schedulers_ecs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q schedulerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if schedulers_ecs exists")
	}

	return count > 0, nil
}

// SchedulerProvidesEcs retrieves all the provides_ec's Provides with an executor via scheduler_id column.
func (o *Scheduler) SchedulerProvidesEcs(mods ...qm.QueryMod) provideQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"provides_ecs\".\"scheduler_id\"=?", o.ID),
	)

	return Provides(queryMods...)
}

// SchedulerRetrievalsEcs retrieves all the retrievals_ec's Retrievals with an executor via scheduler_id column.
func (o *Scheduler) SchedulerRetrievalsEcs(mods ...qm.QueryMod) retrievalQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"retrievals_ecs\".\"scheduler_id\"=?", o.ID),
	)

	return Retrievals(queryMods...)
}

// LoadSchedulerProvidesEcs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (schedulerL) LoadSchedulerProvidesEcs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScheduler interface{}, mods queries.Applicator) error {
	var slice []*Scheduler
	var object *Scheduler

	if singular {
		var ok bool
		object, ok = maybeScheduler.(*Scheduler)
		if !ok {
			object = new(Scheduler)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeScheduler)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeScheduler))
			}
		}
	} else {
		s, ok := maybeScheduler.(*[]*Scheduler)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeScheduler)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeScheduler))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &schedulerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &schedulerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`provides_ecs`),
		qm.WhereIn(`provides_ecs.scheduler_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load provides_ecs")
	}

	var resultSlice []*Provide
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice provides_ecs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on provides_ecs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for provides_ecs")
	}

	if len(provideAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SchedulerProvidesEcs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &provideR{}
			}
			foreign.R.Scheduler = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SchedulerID {
				local.R.SchedulerProvidesEcs = append(local.R.SchedulerProvidesEcs, foreign)
				if foreign.R == nil {
					foreign.R = &provideR{}
				}
				foreign.R.Scheduler = local
				break
			}
		}
	}

	return nil
}

// LoadSchedulerRetrievalsEcs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (schedulerL) LoadSchedulerRetrievalsEcs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScheduler interface{}, mods queries.Applicator) error {
	var slice []*Scheduler
	var object *Scheduler

	if singular {
		var ok bool
		object, ok = maybeScheduler.(*Scheduler)
		if !ok {
			object = new(Scheduler)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeScheduler)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeScheduler))
			}
		}
	} else {
		s, ok := maybeScheduler.(*[]*Scheduler)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeScheduler)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeScheduler))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &schedulerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &schedulerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`retrievals_ecs`),
		qm.WhereIn(`retrievals_ecs.scheduler_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load retrievals_ecs")
	}

	var resultSlice []*Retrieval
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice retrievals_ecs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on retrievals_ecs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for retrievals_ecs")
	}

	if len(retrievalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SchedulerRetrievalsEcs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &retrievalR{}
			}
			foreign.R.Scheduler = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SchedulerID {
				local.R.SchedulerRetrievalsEcs = append(local.R.SchedulerRetrievalsEcs, foreign)
				if foreign.R == nil {
					foreign.R = &retrievalR{}
				}
				foreign.R.Scheduler = local
				break
			}
		}
	}

	return nil
}

// AddSchedulerProvidesEcs adds the given related objects to the existing relationships
// of the schedulers_ec, optionally inserting them as new records.
// Appends related to o.R.SchedulerProvidesEcs.
// Sets related.R.Scheduler appropriately.
func (o *Scheduler) AddSchedulerProvidesEcs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Provide) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SchedulerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"provides_ecs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"scheduler_id"}),
				strmangle.WhereClause("\"", "\"", 2, providePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SchedulerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &schedulerR{
			SchedulerProvidesEcs: related,
		}
	} else {
		o.R.SchedulerProvidesEcs = append(o.R.SchedulerProvidesEcs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &provideR{
				Scheduler: o,
			}
		} else {
			rel.R.Scheduler = o
		}
	}
	return nil
}

// AddSchedulerRetrievalsEcs adds the given related objects to the existing relationships
// of the schedulers_ec, optionally inserting them as new records.
// Appends related to o.R.SchedulerRetrievalsEcs.
// Sets related.R.Scheduler appropriately.
func (o *Scheduler) AddSchedulerRetrievalsEcs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Retrieval) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SchedulerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"retrievals_ecs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"scheduler_id"}),
				strmangle.WhereClause("\"", "\"", 2, retrievalPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SchedulerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &schedulerR{
			SchedulerRetrievalsEcs: related,
		}
	} else {
		o.R.SchedulerRetrievalsEcs = append(o.R.SchedulerRetrievalsEcs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &retrievalR{
				Scheduler: o,
			}
		} else {
			rel.R.Scheduler = o
		}
	}
	return nil
}

// Schedulers retrieves all the records using an executor.
func Schedulers(mods ...qm.QueryMod) schedulerQuery {
	mods = append(mods, qm.From("\"schedulers_ecs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"schedulers_ecs\".*"})
	}

	return schedulerQuery{q}
}

// FindScheduler retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindScheduler(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Scheduler, error) {
	schedulerObj := &Scheduler{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"schedulers_ecs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, schedulerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from schedulers_ecs")
	}

	if err = schedulerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return schedulerObj, err
	}

	return schedulerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Scheduler) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no schedulers_ecs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(schedulerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	schedulerInsertCacheMut.RLock()
	cache, cached := schedulerInsertCache[key]
	schedulerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			schedulerAllColumns,
			schedulerColumnsWithDefault,
			schedulerColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, schedulerGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(schedulerType, schedulerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(schedulerType, schedulerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"schedulers_ecs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"schedulers_ecs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into schedulers_ecs")
	}

	if !cached {
		schedulerInsertCacheMut.Lock()
		schedulerInsertCache[key] = cache
		schedulerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Scheduler.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Scheduler) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	schedulerUpdateCacheMut.RLock()
	cache, cached := schedulerUpdateCache[key]
	schedulerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			schedulerAllColumns,
			schedulerPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, schedulerGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update schedulers_ecs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"schedulers_ecs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, schedulerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(schedulerType, schedulerMapping, append(wl, schedulerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update schedulers_ecs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for schedulers_ecs")
	}

	if !cached {
		schedulerUpdateCacheMut.Lock()
		schedulerUpdateCache[key] = cache
		schedulerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q schedulerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for schedulers_ecs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for schedulers_ecs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SchedulerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"schedulers_ecs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, schedulerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in scheduler slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all scheduler")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Scheduler) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no schedulers_ecs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(schedulerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	schedulerUpsertCacheMut.RLock()
	cache, cached := schedulerUpsertCache[key]
	schedulerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			schedulerAllColumns,
			schedulerColumnsWithDefault,
			schedulerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			schedulerAllColumns,
			schedulerPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, schedulerGeneratedColumns)
		update = strmangle.SetComplement(update, schedulerGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert schedulers_ecs, could not build update column list")
		}

		ret := strmangle.SetComplement(schedulerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(schedulerPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert schedulers_ecs, could not build conflict column list")
			}

			conflict = make([]string, len(schedulerPrimaryKeyColumns))
			copy(conflict, schedulerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"schedulers_ecs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(schedulerType, schedulerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(schedulerType, schedulerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert schedulers_ecs")
	}

	if !cached {
		schedulerUpsertCacheMut.Lock()
		schedulerUpsertCache[key] = cache
		schedulerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Scheduler record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Scheduler) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Scheduler provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), schedulerPrimaryKeyMapping)
	sql := "DELETE FROM \"schedulers_ecs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from schedulers_ecs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for schedulers_ecs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q schedulerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no schedulerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from schedulers_ecs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for schedulers_ecs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SchedulerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(schedulerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"schedulers_ecs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, schedulerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from scheduler slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for schedulers_ecs")
	}

	if len(schedulerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Scheduler) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindScheduler(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SchedulerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SchedulerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"schedulers_ecs\".* FROM \"schedulers_ecs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, schedulerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SchedulerSlice")
	}

	*o = slice

	return nil
}

// SchedulerExists checks if the Scheduler row exists.
func SchedulerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"schedulers_ecs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if schedulers_ecs exists")
	}

	return exists, nil
}

// Exists checks if the Scheduler row exists.
func (o *Scheduler) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SchedulerExists(ctx, exec, o.ID)
}
